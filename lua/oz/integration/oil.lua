local M = {}
local term = require("oz.term")
local util = require("oz.util")
local p = require("oz.persistcmd")
local oil = require("oil")

local function get_cur_entry(short)
	local cursor_entry = oil.get_cursor_entry()

	local entry = cursor_entry.parsed_name or cursor_entry.name
	if short then
		return entry
	end
	local cwd = oil.get_current_dir()
	if cursor_entry.type == "directory" then
		return cwd .. entry .. "/"
	end
	return cwd .. entry
end
local function split_input(input, middle, splitter)
	local escaped_delimiter = splitter:gsub("[%^%$%(%)%%%.%[%]%*%+%-%?]", "%%%1")
	local pos = input:find(escaped_delimiter)

	if pos then
		local pre_dollar = input:sub(1, pos - 1)
		local post_dollar = input:sub(pos + 1)
		return pre_dollar .. " " .. middle .. " " .. post_dollar
	else
		return input .. " " .. middle
	end
end

function M.oil_init(a)
	vim.api.nvim_create_autocmd("FileType", {
		pattern = "oil",
		callback = function(event)
			-- open oz_term
			util.Map("n", a.keys.Term, function()
				local oil_cwd = oil.get_current_dir()
				local cmd = p.getoilcmd(oil_cwd) or ""
				local input = util.UserInput(":Term ", cmd)
				if input then
					if cmd ~= input then
						p.setoilcmd(oil_cwd, input)
					end
					term.run_in_term(input, oil_cwd)
				end
			end, { buffer = event.buf, silent = true, desc = "run cmd in cwd with oz_term" })

			-- open compile_mode
			util.Map("n", a.keys.Compile, function()
				local oil_cwd = oil.get_current_dir()
				vim.g.compilation_directory = oil_cwd
				local cmd = p.getoilcmd(oil_cwd) or ""
				local input = util.UserInput(":Compile ", cmd)
				if input then
					if cmd ~= input then
						p.setoilcmd(oil_cwd, input)
					end
					vim.cmd("Compile " .. input)
				end
			end, { buffer = event.buf, silent = true, desc = "run cmd in cwd with compile_mode" })

			util.Map("n", a.keys.cur_entry_cmd, function()
				local oil_cwd = oil.get_current_dir()
				local input = util.UserInput("Command:")
				if input and input ~= "" then
					local cmd = a.cur_entry_fullpath and split_input(input, get_cur_entry(), a.cur_entry_delimeter_char)
						or split_input(input, get_cur_entry(true), a.cur_entry_delimeter_char)

					if a.cur_entry_async then
						util.ShellCmd(cmd, function()
							util.echoprint("Oz(oil): cmd executed successfully!", "MoreMsg")
							vim.defer_fn(function()
								require("oil.actions").refresh.callback()
							end, 700)
						end, function()
							util.echoprint("Oz(oil): stderr on executaion!", "ErrorMsg")
						end)
					else
						term.run_in_term(cmd, oil_cwd)
					end
				end
			end, { buffer = event.buf, silent = true, desc = "execute cmd on current cursor entry" })

			-- show keymaps
			util.Map("n", a.keys.show_keybinds, function()
				util.Show_buf_keymaps({ subtext = { "~ generated by oz" } })
			end, { buffer = event.buf, silent = true, desc = "show all keymaps" })
		end,
	})
end
return M
