local M = {}
local term = require("oz.term")
local util = require("oz.util")
local p = require("oz.caching")
local oil = require("oil")
local json_name = "oilcmd"

local function get_cur_entry(short)
	local cursor_entry = oil.get_cursor_entry()

	local entry = cursor_entry.parsed_name or cursor_entry.name
	if short then
		return entry
	end
	local cwd = oil.get_current_dir()
	if cursor_entry.type == "directory" then
		return cwd .. entry .. "/"
	end
	return cwd .. entry
end

-- get the splitted cmd for cur entry execution
local function split_input(input, middle, splitter)
	local escaped_delimiter = splitter:gsub("[%^%$%(%)%%%.%[%]%*%+%-%?]", "%%%1")
	local pos = input:find(escaped_delimiter)

	if pos then
		local pre_dollar = input:sub(1, pos - 1)
		local post_dollar = input:sub(pos + 1)
		return pre_dollar .. " " .. middle .. " " .. post_dollar
	else
		return input .. " " .. middle
	end
end

-- all the oil specific mappings initialisation
local function oil_buf_mappings(config, g_mappings)
	local term_k = config.mappings.term == "<global>" and g_mappings.Term

	util.Map("n", term_k, function()
		local oil_cwd = oil.get_current_dir()
		local cmd = p.get_data(oil_cwd, json_name) or ""
		local input = util.UserInput(":Term ", cmd)
		if input then
			if cmd ~= input then
				p.set_data(oil_cwd, input, json_name)
			end
			term.run_in_term(input, oil_cwd)
		end
	end, { buffer = 0, silent = true, desc = "run cmd in this dir with oz_term" })

	-- open compile_mode
	local compile_k = config.mappings.compile == "<global>" and g_mappings.Compile

	util.Map("n", compile_k, function()
		local oil_cwd = oil.get_current_dir()
		vim.g.compilation_directory = oil_cwd
		local cmd = p.get_data(oil_cwd, json_name) or ""
		local input = util.UserInput(":Compile ", cmd)
		if input then
			if cmd ~= input then
				p.set_data(oil_cwd, input, json_name)
			end
			vim.cmd("Compile " .. input)
		end
	end, { buffer = 0, silent = true, desc = "run cmd in this dir with compile_mode" })

	util.Map("n", config.mappings.cur_entry_cmd, function()
		local oil_cwd = oil.get_current_dir()
		local input = util.UserInput("Command:")
		if input and input ~= "" then
			local cmd = config.cur_entry_fullpath and split_input(input, get_cur_entry(), config.cur_entry_splitter)
				or split_input(input, get_cur_entry(true), config.cur_entry_splitter)

			if config.cur_entry_async then
				util.ShellCmd(cmd, function()
					util.echoprint("oz(oil): cmd executed successfully!", "MoreMsg")
					vim.defer_fn(function()
						require("oil.actions").refresh.callback()
					end, 700)
				end, function()
					util.echoprint("oz(oil): cmd execution return error!", "ErrorMsg")
				end)
			else
				term.run_in_term(cmd, oil_cwd)
			end
		end
	end, { buffer = 0, silent = true, desc = "execute cmd on current cursor entry" })

	-- show keymaps
	util.Map("n", config.mappings.show_keybinds, function()
        local show_map = require("oz.util.help_keymaps")
        show_map.show_maps({ subtext = { "~ generated by oz" } })
	end, { buffer = 0, silent = true, desc = "show all keymaps" })
end

-- oil init
function M.oil_init(config, g_mappings)
	-- oil buffer specific mappings
	oil_buf_mappings(config, g_mappings)
end

return M
