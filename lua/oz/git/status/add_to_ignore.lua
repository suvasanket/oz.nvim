local M = {}

local gitignore_comments = {
	"# Auto-generated by oz_git",
	"# See https://git-scm.com/docs/gitignore for more information.",
	"# Wildcards: * (any chars), ? (single char), [] (char range), ** (any directories)",
	"# Use ! to negate a pattern (re-include files).",
	"",
}
local function ensure_comments_exist(gitignore_path)
	local ok, lines = pcall(vim.fn.readfile, gitignore_path)

	if not ok then
		vim.fn.writefile(gitignore_comments, gitignore_path)
		return
	end

	local first_line = lines[1]
	if first_line:sub(1, 1) ~= "#" then
		local new_lines = {}
		for _, comment_line in ipairs(gitignore_comments) do
			table.insert(new_lines, comment_line)
		end
		for _, original_line in ipairs(lines) do
			table.insert(new_lines, original_line)
		end

		vim.fn.writefile(new_lines, gitignore_path)
	end
end

local function open_git_ignore(paths, gitignore_path)
	vim.cmd("split " .. gitignore_path)

	local current_buffer = vim.api.nvim_get_current_buf()
	local line_count = vim.api.nvim_buf_line_count(current_buffer)

	vim.api.nvim_buf_set_lines(current_buffer, line_count, -1, false, paths)
	vim.api.nvim_win_set_cursor(0, { line_count + 1, 0 })

	vim.api.nvim_create_autocmd("BufWinLeave", {
		buffer = current_buffer,
		callback = function()
			require("oz.git.status").refresh_status_buf(true)
		end,
		once = true,
	})
end

M.add_to_gitignore = function(paths)
	if #paths == 0 then
		return
	end

	local project_root = require("oz.git").state.root
	local gitignore_path = project_root .. "/.gitignore"

	ensure_comments_exist(gitignore_path)
	open_git_ignore(paths, gitignore_path)
end

return M
